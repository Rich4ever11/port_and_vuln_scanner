using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.DataFormats;

struct CapecStruct
{
    public string id;
    public string name;
    public string prerequisites;
    public string solutions;
    public string summary;
}

struct CPEStruct
{
    public string vendor;
    public string product;
    public string version;
}

namespace PortScanner
{
    public partial class VulnerabilityLookUp : Form
    {
        IDictionary<string, List<CapecStruct>> CVECapec = new Dictionary<string, List<CapecStruct>>();
        IDictionary<string, List<CPEStruct>> CVECPE = new Dictionary<string, List<CPEStruct>>();
        public VulnerabilityLookUp()
        {
            InitializeComponent();
        }

        private void loadVulnerabilityDataNoAPI()
        {
            foreach (dynamic CVE in portScanner.vulnerabilityListExtensive)
            {
                string CVEID = CVE?["id"];
                string authenticationEffect = CVE?["access"]?["authentication"]?.ToString() ?? "Not Found";
                string attackComplexity = CVE?["access"]?["complexity"]?.ToString() ?? "Not Found";
                string attackVector = CVE?["access"]?["vector"]?.ToString() ?? "Not Found";

                string cvssRating = CVE?["cvss"]?.ToString() ?? "Not Found";
                string impactScoreRating = CVE?["impactScore"]?.ToString() ?? "Not Found";
                string exploitabilityScoreRating = CVE?["exploitabilityScore"]?.ToString() ?? "Not Found";

                string cvss3Rating = CVE?["cvss3"]?.ToString() ?? "Not Found";
                string impact3Rating = CVE?["impactScore3"]?.ToString() ?? "Not Found";
                string exploitability3SRating = CVE?["exploitabilityScore3"]?.ToString() ?? "Not Found";

                string availabilityStatus = CVE?["impact"]?["availability"]?.ToString() ?? "Not Found";
                string confidentialityStatus = CVE?["impact"]?["confidentiality"]?.ToString() ?? "Not Found";
                string integrityStatus = CVE?["impact"]?["integrity"]?.ToString() ?? "Not Found";

                string impact3AvailabilityStatus = CVE?["impact3"]?["availability"]?.ToString() ?? "Not Found";
                string impact3ConfidentialityStatus = CVE?["impact3"]?["confidentiality"]?.ToString() ?? "Not Found";
                string impact3IntegrityStatus = CVE?["impact3"]?["integrity"]?.ToString() ?? "Not Found";

                string exploitability3AttackVector = CVE?["exploitability3"]?["attackvector"]?.ToString() ?? "Not Found";
                string exploitability3AttackComplexity = CVE?["exploitability3"]?["attackcomplexity"]?.ToString() ?? "Not Found";
                string exploitability3PrivilegesRequired = CVE?["exploitability3"]?["privilegesrequired"]?.ToString() ?? "Not Found";
                string exploitability3Userinteraction = CVE?["exploitability3"]?["userinteraction"]?.ToString() ?? "Not Found";
                string exploitability3Scope = CVE?["exploitability3"]?["scope"]?.ToString() ?? "Not Found";

                string impact = CVE?["msbulletin"]?[0]?["impact"]?.ToString() ?? "Not Found";
                string shortDescription = CVE?["msbulletin"]?[0]?["title"]?.ToString() ?? "Not Found";
                string severity = CVE?["msbulletin"]?[0]?["severity"]?.ToString() ?? "Not Found";
                string summary = CVE?["summary"]?.ToString() ?? "Not Found";
                string published = CVE?["Published"]?.ToString() ?? "Not Found";
                string modified = CVE?["Modified"]?.ToString() ?? "Not Found";
                List<CapecStruct> CapecList = new List<CapecStruct>();
                List<CPEStruct> CPEList = new List<CPEStruct>();
                if (CVE?["capec"] != null)
                {
                    for (int i = 0; i < CVE?["capec"]?.Count; i++)
                    {
                        CapecStruct newCapecStruct = new CapecStruct();
                        newCapecStruct.id = CVE?["capec"]?[i]?["id"];
                        newCapecStruct.name = CVE?["capec"]?[i]?["name"];
                        newCapecStruct.prerequisites = CVE?["capec"]?[i]?["prerequisites"];
                        newCapecStruct.solutions = CVE?["capec"]?[i]?["solutions"];
                        newCapecStruct.summary = CVE?["capec"]?[i]?["summary"];
                        CapecList.Add(newCapecStruct);

                    }
                }
                if (CVE?["vulnerable_product"] != null)
                {
                    for (int i = 0; i < CVE?["vulnerable_product"]?.Count; i++)
                    {
                        CPEStruct newCPEStruct = new CPEStruct();
                        string fullProduct = CVE?["vulnerable_product"][i];
                        string[] fullProductStringList = fullProduct.Split(':');
                        newCPEStruct.vendor = fullProductStringList[3];
                        newCPEStruct.product = fullProductStringList[4];
                        newCPEStruct.version = fullProductStringList[5];
                        CPEList.Add(newCPEStruct);
                    }
                }
                CVECapec[CVEID] = CapecList;
                CVECPE[CVEID] = CPEList;
                dataGridView1.Rows.Add(CVEID, cvssRating, impactScoreRating, exploitabilityScoreRating, cvss3Rating, impact3Rating, exploitability3SRating, shortDescription, severity, impact, availabilityStatus, confidentialityStatus, integrityStatus,
                    impact3AvailabilityStatus, impact3ConfidentialityStatus, impact3IntegrityStatus, exploitability3AttackVector, exploitability3AttackComplexity,
                    exploitability3PrivilegesRequired, exploitability3Userinteraction, exploitability3Scope, authenticationEffect, attackComplexity, attackVector, summary, published, modified);
            }
        }

        private void loadVulnerabilityData(List<string> CVEList)
        {
            foreach (string CVE in CVEList)
            {
                dynamic CVEAPICallResult = portScanner.createAPICall("https://cvepremium.circl.lu/api/cve/", CVE);

                string authenticationEffect = CVEAPICallResult?["access"]?["authentication"]?.ToString() ?? "Not Found";
                string attackComplexity = CVEAPICallResult?["access"]?["complexity"]?.ToString() ?? "Not Found";
                string attackVector = CVEAPICallResult?["access"]?["vector"]?.ToString() ?? "Not Found";

                string cvssRating = CVEAPICallResult?["cvss"]?.ToString() ?? "Not Found";
                string impactScoreRating = CVEAPICallResult?["impactScore"]?.ToString() ?? "Not Found";
                string exploitabilityScoreRating = CVEAPICallResult?["exploitabilityScore"]?.ToString() ?? "Not Found";

                string cvss3Rating = CVEAPICallResult?["cvss3"]?.ToString() ?? "Not Found";
                string impact3Rating = CVEAPICallResult?["impactScore3"]?.ToString() ?? "Not Found";
                string exploitability3SRating = CVEAPICallResult?["exploitabilityScore3"]?.ToString() ?? "Not Found";

                string availabilityStatus = CVEAPICallResult?["impact"]?["availability"]?.ToString() ?? "Not Found";
                string confidentialityStatus = CVEAPICallResult?["impact"]?["confidentiality"]?.ToString() ?? "Not Found";
                string integrityStatus = CVEAPICallResult?["impact"]?["integrity"]?.ToString() ?? "Not Found";

                string impact3AvailabilityStatus = CVEAPICallResult?["impact3"]?["availability"]?.ToString() ?? "Not Found";
                string impact3ConfidentialityStatus = CVEAPICallResult?["impact3"]?["confidentiality"]?.ToString() ?? "Not Found";
                string impact3IntegrityStatus = CVEAPICallResult?["impact3"]?["integrity"]?.ToString() ?? "Not Found";

                string exploitability3AttackVector = CVEAPICallResult?["exploitability3"]?["attackvector"]?.ToString() ?? "Not Found";
                string exploitability3AttackComplexity = CVEAPICallResult?["exploitability3"]?["attackcomplexity"]?.ToString() ?? "Not Found";
                string exploitability3PrivilegesRequired = CVEAPICallResult?["exploitability3"]?["privilegesrequired"]?.ToString() ?? "Not Found";
                string exploitability3Userinteraction = CVEAPICallResult?["exploitability3"]?["userinteraction"]?.ToString() ?? "Not Found";
                string exploitability3Scope = CVEAPICallResult?["exploitability3"]?["scope"]?.ToString() ?? "Not Found";

                string impact = CVEAPICallResult?["msbulletin"]?[0]?["impact"]?.ToString() ?? "Not Found";
                string shortDescription = CVEAPICallResult?["msbulletin"]?[0]?["title"]?.ToString() ?? "Not Found";
                string severity = CVEAPICallResult?["msbulletin"]?[0]?["severity"]?.ToString() ?? "Not Found";
                string summary = CVEAPICallResult?["summary"]?.ToString() ?? "Not Found";
                string published = CVEAPICallResult?["Published"]?.ToString() ?? "Not Found";
                string modified = CVEAPICallResult?["Modified"]?.ToString() ?? "Not Found";
                List<CapecStruct> CapecList = new List<CapecStruct>();

                for (int i = 0; i < CVEAPICallResult?["capec"]?.Count; i++)
                {
                    CapecStruct newCapecStruct = new CapecStruct();
                    newCapecStruct.id = CVEAPICallResult?["capec"]?[i]?["id"];
                    newCapecStruct.name = CVEAPICallResult?["capec"]?[i]?["name"];
                    newCapecStruct.prerequisites = CVEAPICallResult?["capec"]?[i]?["prerequisites"];
                    newCapecStruct.solutions = CVEAPICallResult?["capec"]?[i]?["solutions"];
                    newCapecStruct.summary = CVEAPICallResult?["capec"]?[i]?["summary"];
                    CapecList.Add(newCapecStruct);

                }
                List<CPEStruct> CPEList = new List<CPEStruct>();
                for (int i = 0; i < CVEAPICallResult?["vulnerable_product"]?.Count; i++)
                {
                    CPEStruct newCPEStruct = new CPEStruct();
                    string fullProduct = CVEAPICallResult?["vulnerable_product"][i];
                    string[] fullProductStringList = fullProduct.Split(':');
                    newCPEStruct.vendor = fullProductStringList[3];
                    newCPEStruct.product = fullProductStringList[4];
                    newCPEStruct.version = fullProductStringList[5];
                    CPEList.Add(newCPEStruct);
                }
                CVECapec[CVE] = CapecList;
                CVECPE[CVE] = CPEList;
                dataGridView1.Rows.Add(CVE, cvssRating, impactScoreRating, exploitabilityScoreRating, cvss3Rating, impact3Rating, exploitability3SRating, shortDescription, severity, impact, availabilityStatus, confidentialityStatus, integrityStatus,
                    impact3AvailabilityStatus, impact3ConfidentialityStatus, impact3IntegrityStatus, exploitability3AttackVector, exploitability3AttackComplexity,
                    exploitability3PrivilegesRequired, exploitability3Userinteraction, exploitability3Scope, authenticationEffect,  attackComplexity, attackVector, summary, published, modified);
            }
        }

        private void VulnerabilityLookUp_Load(object sender, EventArgs e)
        {
            dataGridView3.Rows.Clear();
            dataGridView2.Rows.Clear();
            dataGridView1.Rows.Clear();
            ScanLoader frm2 = new ScanLoader();
            frm2.scanPreformed = "Scanning For Vulnerabilites...";
            frm2.Show();
            if (portScanner.vulnerabilityListExtensive.Any())
            {
                loadVulnerabilityDataNoAPI();
            }
            else if (portScanner.vulnerabilityList.Any())
            {
                loadVulnerabilityData(portScanner.vulnerabilityList);
            }
            frm2.Close();
        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            richTextBox2.Text = "";
            dataGridView3.Rows.Clear();
            dataGridView2.Rows.Clear();
            DataGridView dgv = new DataGridView();
            dgv = dataGridView1;
            string targetCellName = dgv.CurrentRow.Cells[0].Value.ToString();
            foreach (CapecStruct Capec in CVECapec[targetCellName])
            {
                string[] row = new string[] { Capec.id, Capec.name, Capec.prerequisites, Capec.solutions, Capec.summary };
                dataGridView3.Rows.Add(row);
            }

            foreach (CPEStruct CPE in CVECPE[targetCellName])
            {
                string[] row = new string[] { CPE.vendor, CPE.product, CPE.version };
                dataGridView2.Rows.Add(row);
            }
            richTextBox2.Text = "CVE Stands for Common Vulnerabilities and Exposures. It is a list of publicly disclosed computer security flaws. When someone refers to a CVE, they mean a security flaw that's been assigned a CVE ID number.\n\n";
            richTextBox2.Text += "CVE ID - " + targetCellName + "\n\n";
            richTextBox2.Text += targetCellName + " Description - " + dgv.CurrentRow.Cells[24].Value.ToString() + "\n\n";
            richTextBox2.Text += targetCellName + " Short Description - " + dgv.CurrentRow.Cells[7].Value.ToString() + "\n\n";
            richTextBox2.Text += targetCellName + " CVSS Rating - " + dgv.CurrentRow.Cells[1].Value.ToString() + "\n\n";
            richTextBox2.Text += targetCellName + " Impact Rating - " + dgv.CurrentRow.Cells[2].Value.ToString() + "\n\n";
            richTextBox2.Text += targetCellName + " Exploitiability Rating - " + dgv.CurrentRow.Cells[3].Value.ToString() + "\n\n";
            richTextBox2.Text += targetCellName + " CVSS V3 Rating - " + dgv.CurrentRow.Cells[4].Value.ToString() + "\n\n";
            richTextBox2.Text += targetCellName + " Impact V3 Rating - " + dgv.CurrentRow.Cells[5].Value.ToString() + "\n\n";
            richTextBox2.Text += targetCellName + " Exploitiability V3 Rating - " + dgv.CurrentRow.Cells[6].Value.ToString() + "\n\n";
        }

        private void dataGridView3_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            richTextBox2.Text = "";
            DataGridView dgv = new DataGridView();
            dgv = dataGridView3;
            string CapecId = dgv.CurrentRow.Cells[0].Value.ToString();
            string CapecName = dgv.CurrentRow.Cells[1].Value.ToString();
            string CapecPrerequisites = dgv.CurrentRow.Cells[2].Value.ToString();
            string CapecSolution = dgv.CurrentRow.Cells[3].Value.ToString();
            string CapecSummary = dgv.CurrentRow.Cells[4].Value.ToString();

            richTextBox2.Text += "CAPEC Stands for Common Attack Pattern Enumeration and Classification. It helps provide a comprehensive dictionary of known patterns of attack employed by adversaries to exploit known weaknesses in cyber-enabled capabilities." + "\n\n";


            richTextBox2.Text += "Capec Num. " + CapecId + "\n\n";
            richTextBox2.Text += "Capec Num. " + CapecId + " Name - " + CapecName + "\n\n";
            richTextBox2.Text += "Capec Num. " + CapecId + " Summary - " + CapecSummary + "\n\n";
            richTextBox2.Text += "Capec Num. " + CapecId + " Prerequisites - " + CapecPrerequisites + "\n\n";
            richTextBox2.Text += "Capec Num. " + CapecId + " Solution - " + CapecSolution;
        }
    }
}
